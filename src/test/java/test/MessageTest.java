/*
 * Copyright (C) Beijing Xiaomi Co., Ltd
 * By Vito on 2022/1/14 12:08
 */
package test;

import com.dvbug.demo2.blockchain.Block;
import com.dvbug.demo2.util.GsonUtil;
import kotlin.Pair;
import org.junit.Test;

import java.util.List;
import java.util.Optional;

import static com.dvbug.demo2.blockchain.ChainManager.validNewBlock;

public class MessageTest {
    @Test
    public void testMessageJson() {
        String blocks = "[{\"index\":1,\"hash\":\"0be55b65b9cb674a945395ddbb940f4f6628d9c277fad6ea766daaed09adc3b2\",\"timestamp\":1642133033630,\"nonce\":1,\"transactions\":[{\"id\":\"1\",\"bizData\":\"This is genesis block\"},{\"id\":\"2\",\"bizData\":\"Blockchain level: 1\"}]},{\"index\":2,\"hash\":\"00005b60dbdc82de3d93092805766cc2231120d3b051bbf76cb95d249d0cbbc3\",\"prevHash\":\"0be55b65b9cb674a945395ddbb940f4f6628d9c277fad6ea766daaed09adc3b2\",\"timestamp\":1642133034316,\"nonce\":101341,\"transactions\":[{\"id\":\"1\",\"bizData\":\"This block generated by node 172.17.0.1:1\"},{\"id\":\"2\",\"bizData\":\"Blockchain level: 2\"}]},{\"index\":3,\"hash\":\"00003a4555a006e817143e857aebf39d48b95641b2d11d9f2e8c7b6953ec84d8\",\"prevHash\":\"00005b60dbdc82de3d93092805766cc2231120d3b051bbf76cb95d249d0cbbc3\",\"timestamp\":1642133109919,\"nonce\":105491,\"transactions\":[{\"id\":\"1\",\"bizData\":\"This block generated by node 172.17.0.1:1\"},{\"id\":\"2\",\"bizData\":\"Blockchain level: 3\"}]},{\"index\":4,\"hash\":\"0000ae8daf8c7cc297344d5e6afb4cdda9e6434a8f9577b03782572ecb066bed\",\"prevHash\":\"00003a4555a006e817143e857aebf39d48b95641b2d11d9f2e8c7b6953ec84d8\",\"timestamp\":1642133159712,\"nonce\":266334,\"transactions\":[{\"id\":\"1\",\"bizData\":\"This block generated by node 172.17.0.1:1\"},{\"id\":\"2\",\"bizData\":\"Blockchain level: 4\"}]}]";
        List<Block> receivedChain = GsonUtil.fromJsonArray(blocks, Block.class);
        System.out.println(receivedChain);

        Boolean bbb = receivedChain.stream().reduce(new Pair<>(receivedChain.get(0), true), (prev, curr) -> {
            if (!prev.getSecond()) return new Pair<>(curr, false);

            boolean b = validNewBlock(curr, prev.getFirst());
            return new Pair<>(curr, b);
        }, (p, c) -> null).getSecond();
        System.out.println(bbb);

        Pair<Block, Boolean> init = new Pair<>(null, true);
        Boolean bbb2 = receivedChain.stream().reduce(init, (prev, curr) -> {
            if(prev == init) return new Pair<>(curr, true);
            if (!prev.getSecond()) return new Pair<>(curr, false);

            return new Pair<>(curr, validNewBlock(curr, prev.getFirst()));
        }, (p, c) -> null).getSecond();
        System.out.println(bbb2);
    }
}
